# -*- coding: utf-8 -*-
"""blank-starter.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1MB156IE6A7jS_8-Qk9DSfy1pmRVQ3ZrD
"""

# Jovian Commit Essentials
# Please retain and execute this cell without modifying the contents for `jovian.commit` to work
!pip install jovian --upgrade -q
import jovian
jovian.utils.colab.set_colab_file_id('1MB156IE6A7jS_8-Qk9DSfy1pmRVQ3ZrD')

!pip install jovian --upgrade --quiet

"""## Import the libraries"""

import numpy as np
import matplotlib.pyplot as plt
import pandas as pd

"""## Import the dataset"""

dataset = pd.read_csv('Restaurant_Reviews.tsv', delimiter='\t', quoting= 3)

df = pd.concat([dataset['Review'], dataset['Liked']], axis=1)
df

import seaborn as sns
sns.countplot(x = 'Liked', data=df)

"""## Cleaning the texts"""

import re
import nltk
nltk.download('stopwords')
from nltk.corpus import stopwords
from nltk.stem.porter import PorterStemmer
corpus = []
for i in range(0, 1000):
  review = re.sub('[^a-zA-Z]', ' ', dataset['Review'][i])
  review = review.lower()
  review = review.split()
  ps = PorterStemmer()
  all_stopwords = stopwords.words('english')
  all_stopwords.remove('not')
  review = [ps.stem(word) for word in review if not word in set(all_stopwords)]
  review = ' '.join(review)
  corpus.append(review)

print(corpus)

"""## Creating the Beg of words model"""

from sklearn.feature_extraction.text import CountVectorizer
cv = CountVectorizer(max_features = 1500)
X = cv.fit_transform(corpus).toarray()
y = dataset.iloc[:, -1].values
pos=0
neg=0
for i in range(0,1000):
  if(y[i]==0):
    pos=pos+1
  else:
    neg=neg+1
print(pos)    
print(neg)

"""## Splitting the dataset into the Training set and Test set"""

from sklearn.model_selection import train_test_split
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.20, random_state = 0)

import jovian

jovian.commit(project='cmpn-100')

"""## Training the Naive Bayes model on the Training set"""

from sklearn.naive_bayes import GaussianNB
classifier = GaussianNB()
classifier.fit(X_train, y_train)

y_pred = classifier.predict(X_test)

from sklearn.metrics import confusion_matrix, accuracy_score
cm = confusion_matrix(y_test, y_pred)
print(cm)
accuracy_score(y_test, y_pred)

"""## Training on Simple Logistic Regression"""

from sklearn.linear_model import LogisticRegression
classifier2 = LogisticRegression(random_state = 0)
classifier2.fit(X_train, y_train)
y_pred2 = classifier2.predict(X_test)

from sklearn.metrics import confusion_matrix, accuracy_score
cm = confusion_matrix(y_test, y_pred)
print(cm)
accuracy_score(y_test, y_pred2)

"""## Training on SVM"""

from sklearn.svm import SVC
classifier3 = SVC(kernel = 'linear', random_state = 0)
classifier3.fit(X_train, y_train)
y_pred3 = classifier3.predict(X_test)

from sklearn.metrics import confusion_matrix, accuracy_score
cm = confusion_matrix(y_test, y_pred)
print(cm)
accuracy_score(y_test, y_pred3)

"""## Training On Decision Tree"""

from sklearn.tree import DecisionTreeClassifier
classifier4 = DecisionTreeClassifier(criterion = 'entropy', random_state = 0)
classifier4.fit(X_train, y_train)
y_pred4 = classifier4.predict(X_test)

from sklearn.metrics import confusion_matrix, accuracy_score
cm = confusion_matrix(y_test, y_pred)
print(cm)
accuracy_score(y_test, y_pred4)

"""## Random Forest Classifier"""

from sklearn.ensemble import RandomForestClassifier
classifier5 = RandomForestClassifier(n_estimators = 10, criterion = 'entropy', random_state = 0)
classifier5.fit(X_train, y_train)
y_pred5 = classifier5.predict(X_test)

from sklearn.metrics import confusion_matrix, accuracy_score
cm = confusion_matrix(y_test, y_pred)
print(cm)
accuracy_score(y_test, y_pred5)

"""## Training on Multinomial Nb"""

from sklearn.naive_bayes import MultinomialNB
classifier6 = MultinomialNB()
classifier6.fit(X_train, y_train)
y_pred6 = classifier6.predict(X_test)

from sklearn.metrics import confusion_matrix, accuracy_score
cm = confusion_matrix(y_test, y_pred)
print(cm)
accuracy_score(y_test, y_pred6)

"""### SVM has high accuracy score"""

from sklearn.metrics import classification_report
print(classification_report(y_test,y_pred3))

dataset['corpus'] = corpus
dataset

from wordcloud import WordCloud, STOPWORDS, ImageColorGenerator
import re
from PIL import Image

wc = WordCloud(max_words=100, width=1600, height=600, stopwords=all_stopwords).generate(" ".join(dataset[dataset.Liked==1].corpus))

plt.figure(figsize=(15,15))
plt.imshow(wc,interpolation = "bilinear")
plt.show()

from wordcloud import WordCloud, STOPWORDS, ImageColorGenerator
import re
from PIL import Image

wc = WordCloud(max_words=100, width=1600, height=600, stopwords=all_stopwords).generate(" ".join(dataset[dataset.Liked==0].corpus))

plt.figure(figsize=(15,15))
plt.imshow(wc,interpolation = "bilinear")
plt.show()

jovian.commit(project='cmpn-100')

